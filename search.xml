<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并行程序设计-第二讲.并行硬件与并行软件</title>
      <link href="/2022/09/13/di-er-jiang-bing-xing-ying-jian-he-bing-xing-ruan-jian/"/>
      <url>/2022/09/13/di-er-jiang-bing-xing-ying-jian-he-bing-xing-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="第二讲-并行硬件和并行软件"><a href="#第二讲-并行硬件和并行软件" class="headerlink" title="第二讲 并行硬件和并行软件"></a>第二讲 并行硬件和并行软件</h1><h2 id="冯诺依曼结构"><a href="#冯诺依曼结构" class="headerlink" title="冯诺依曼结构"></a>冯诺依曼结构</h2><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102147832.png" alt="image-20221010214750673" style="zoom:50%;"><p>缺点：cpu和存储器离得太远，取指令时间很长</p><h3 id="冯诺依曼模型改进"><a href="#冯诺依曼模型改进" class="headerlink" title="冯诺依曼模型改进"></a>冯诺依曼模型改进</h3><h4 id="利用cache"><a href="#利用cache" class="headerlink" title="利用cache"></a>利用cache</h4><ul><li><p>多级缓存</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102209318.png" style="zoom:25%;"></li><li><p>cpu向cache写数据时，cache和主存中的值不一致的问题</p><ul><li>写直达：当CPU 向Cache写数据时，高速缓存行会立即写入 主存中。</li><li>写回：Cache中，数据不是立即 更新到主存中，而是将发生数据更新的高速 缓存行标记称脏(dirty)。当发生高速缓存行 替换时，标记为脏的高速缓存行被写入主存 中。</li></ul></li></ul><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>内存不够用时，再磁盘中开辟一块区域作为虚拟内存</p><p>但是常用的指令还是要放到内存中</p><h4 id="指令级并行ILP"><a href="#指令级并行ILP" class="headerlink" title="指令级并行ILP"></a>指令级并行ILP</h4><p>通过让多个处理器或者功能单元同时执 行指令来提高处理器的性能。</p><ul><li><p><strong>流水线</strong>：将功能单元分阶段安排</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102228662.png" style="zoom:25%;"></li><li><p><strong>多发射</strong>：让多条指令同时启动</p><ul><li><strong>静态</strong>多发射：功能单元在<strong>编译</strong>时调度</li><li><strong>动态</strong>多发射：功能单元再<strong>运行</strong>时间调度<ul><li>支持动态多发射的处理器叫做<strong>超标量</strong></li></ul></li><li>这两种发射方式都是<strong>硬件</strong>级别的，不是程序员控制的</li></ul><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102231899.png" alt="image-20221010223142729" style="zoom:25%;"></li><li><p>超标量</p><ul><li><p>为了能够利用多发射，系统必须找出能够同时执行的指令</p></li><li><p>在预测技术中，编译器或者处理器对一条指令进行猜测，然后在<strong>猜测</strong>的基础上执行代码。（可能会猜错</p></li><li><p>例1</p><img src="C:\Users\xiaon\AppData\Roaming\Typora\typora-user-images\image-20221021205239913.png" alt="image-20221021205239913" style="zoom: 25%;"><p>如果*a_p指向的是z，那么这两条指令不能同时执行</p></li><li><p>例2</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210212110457.png" alt="image-20221021211033384" style="zoom:25%;"><p>z可能为正数也可能为负数</p><p>如果系统猜错了，必须返回并重新计算w=y</p></li></ul></li></ul><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li><p><strong>进程</strong>：是运行着的程序的一个实例</p><ul><li><p><strong>多任务操作系统</strong></p><p>给人一种单一处理器系统同时运行多个程序的错觉</p><p>实际上<strong>每个进程轮流运行</strong></p><p>执行了一个时间片的时间后，他会等待一段时间直到再次运行</p></li></ul></li><li><p><strong>线程</strong></p><ul><li><p>线程包含在进程中</p></li><li><p>每个线程相互独立</p><p>当某个任务阻塞时能执行其他任务</p></li><li><p>线程间的切换比进程间的切换要快</p></li></ul></li></ul><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102203190.png" alt="image-20221010220356970" style="zoom: 33%;"><h3 id="硬件多线程"><a href="#硬件多线程" class="headerlink" title="硬件多线程"></a>硬件多线程</h3><p>硬件多线程为系统提供一种机制，使得当前执行的任务被阻塞时，系统能够继续其他有用的工作</p><p>硬件多线程分为一下三种类型：</p><p>图示？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><ul><li><p>细粒度（程序员不可见</p><ul><li>处理器在<strong>每条指令</strong>完成后切换线程，从而跳过被阻塞的线程</li><li><strong>优点</strong>：能够避免因为阻塞而导致机器时间的浪费</li><li><strong>缺点</strong>：执行很长一段指令的线程在执行每条指令的时候都要等待</li></ul></li><li><p>粗粒度（程序员不可见</p><ul><li>只切换那些需要<strong>等待较长时间才能完成操作而被阻塞的线程</strong></li><li><strong>优点</strong>：不需要线程间的立即切换</li><li><strong>缺点</strong>：处理器还是可能在短阻塞时空闲，线程间的切换会导致延迟</li></ul></li><li><p>同步多线程（程序员可见，可以通过写程序来控制</p><ul><li>类似于多核（真正的同时</li><li>允许多个线程同时使用多个功能单元来利用超标量处理器的性能</li><li>局限性：一个核上面不会有太多的线程，常见的是2个线程</li></ul></li></ul><h2 id="并行硬件"><a href="#并行硬件" class="headerlink" title="并行硬件"></a>并行硬件</h2><h3 id="Flynn’s-分类法"><a href="#Flynn’s-分类法" class="headerlink" title="Flynn’s 分类法"></a>Flynn’s 分类法</h3><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210212141324.png" alt="image-20221021214151218" style="zoom:33%;"><h3 id="SIMD（单指令多数据流）"><a href="#SIMD（单指令多数据流）" class="headerlink" title="SIMD（单指令多数据流）"></a>SIMD（单指令多数据流）</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>通过将<strong>数据</strong>分配给多个处理器实现并行化</p><p>使用<strong>相同的指令</strong>来操纵数据子集</p><p>这种并行称为<strong>数据并行</strong></p><p> 例子</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210220916715.png" alt="image-20221022091601607" style="zoom: 33%;"></li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210220916572.png" alt="image-20221022091638479"></li></ul><h4 id="SIMD缺点："><a href="#SIMD缺点：" class="headerlink" title="SIMD缺点："></a>SIMD缺点：</h4><ul><li>所有ALU（算术处理单元）<strong>要么执行相同的指令，要么同时处于空闲状态</strong></li><li>ALU<strong>没有指令存储器</strong></li><li>在经典的SIMD系统中，ALU必须<strong>同步</strong>操作</li><li>SIMD并行性在<strong>大型数据</strong>并行问题上非常有用，处理其他并行问题时并不优秀</li></ul><h4 id="SIMD典型应用"><a href="#SIMD典型应用" class="headerlink" title="SIMD典型应用"></a>SIMD典型应用</h4><h5 id="向量处理器"><a href="#向量处理器" class="headerlink" title="向量处理器"></a>向量处理器</h5><ul><li><p>向量处理器是对<strong>数组或者数据向量</strong>进行操作，而传统的cpu是对<strong>单独数据元素或者标量</strong>进行操作</p></li><li><p>原理</p><ul><li><p>向量寄存器</p><p>能够存储由<strong>多个操作数组成的向量</strong>，并且能够同时对其内容进行操作的寄存器</p></li><li><p>向量化和流水化的功能单元</p><p>对向量中每个元素做同样的操作，这些操作需要应用到2个或以上对应元素上</p></li><li><p>向量指令</p><p>在向量上操作而不是在标量上操作</p></li><li><p>交叉存储器（不太重要</p><p>内存系统由多个内存“体”组成，每个内存体能够独立访问</p><p>如果向量中各个元素分布在<strong>不同的内存体</strong>中，那么在装入/存储连续数据时几乎能够<strong>无延迟访问</strong></p></li><li><p>步长式存储器访问和硬件的散射/聚集（不太重要</p><p>程序能够访问向量中固定间隔的元素</p></li></ul></li><li><p>向量处理器优点（理解即可</p><ul><li><p>速度快</p></li><li><p>容易使用</p></li><li><p>向量编译器擅长于识别向量化的代码</p></li><li><p>编译器也能提供代码为什么不能向量化的原因</p><p>帮助程序员重新评估代码</p></li><li><p>很高的内存带宽</p></li><li><p>每个加载的数据都会使用</p></li></ul></li><li><p>向量处理器缺点</p><ul><li>不能处理<strong>不规则</strong>的数据结构和其他并行结构<ul><li>不规则：例如加一个判断语句y&gt;0之类的就不适用</li></ul></li><li>他的<strong>可扩展性</strong>是个限制，可扩展性是指能够处理更大问题的能力<ul><li>想要提高性能就只能增加向量处理器的数量，而不是提高向量处理器的能力</li></ul></li></ul></li></ul><h5 id="GPU（图形处理单元）"><a href="#GPU（图形处理单元）" class="headerlink" title="GPU（图形处理单元）"></a>GPU（图形处理单元）</h5><ul><li>GPU使用图形处理流水线将物体表面的内部表示转化成一个像素的数组</li><li>流水线的许多阶段（通过着色函数实现）是可编程的</li><li>GPU常使用SIMD来优化性能</li><li>现在所有的GPU都使用SIMD并行<ul><li>尽管GPU不是纯粹的SIMD系统（GUP里有很多很多核</li><li>1个控制单元对应多个处理单元？？？</li></ul></li></ul><h3 id="MIMD（多指令多数据流）"><a href="#MIMD（多指令多数据流）" class="headerlink" title="MIMD（多指令多数据流）"></a>MIMD（多指令多数据流）</h3><ul><li><p>支持同时多个指令流在多个数据流上操作</p></li><li><p>通常包括完全独立的处理单元或者核，每个处理单元或者核都有自己的控制单元和ALU</p><ul><li><p>对比SIMD：</p><p>SIMD系统那些指令单元必须<strong>同步执行相同指令</strong></p></li></ul></li></ul><h4 id="MIMD分为两大类"><a href="#MIMD分为两大类" class="headerlink" title="MIMD分为两大类"></a>MIMD分为两大类</h4><h5 id="共享内存系统"><a href="#共享内存系统" class="headerlink" title="共享内存系统"></a>共享内存系统</h5><ul><li><p>一组自治的处理器通过互联网络与内存系统相互连接</p><ul><li>意思是这些处理器<strong>共享所有内存</strong>，每个处理器能够访问每个内存区域</li><li>处理器通过<strong>访问共享的数据结构</strong>来<strong>隐式的通信</strong></li></ul></li><li><p>最广泛使用的共享内存系统使用一个或者多个多核处理器</p><ul><li>在一块芯片上有多个cpu或者核</li></ul></li><li><p>图示</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221002252.png" alt="image-20221022100256140" style="zoom: 25%;"></li><li><p>共享内存系统可以分为两类：</p><ul><li><p>UMA一致内存访问系统</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221006036.png" alt="image-20221022100638935"></p></li><li><p>NUMA非一致内存访问系统</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221010042.png" alt="image-20221022101055916"></p><p>这是共享内存系统，而不是分布式内存系统！！</p></li></ul></li></ul><h5 id="分布式内存系统"><a href="#分布式内存系统" class="headerlink" title="分布式内存系统"></a>分布式内存系统</h5><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221010627.png" alt="image-20221022101027522" style="zoom: 25%;"><ul><li>集群（最广泛使用<ul><li>这些系统中的节点是通过通信网络互相连接的独立计算单元</li></ul></li></ul><h4 id="互联网络"><a href="#互联网络" class="headerlink" title="互联网络"></a>互联网络</h4><ul><li><p>在分布式内存系统和共享内存系统都扮演了一个决定性的角色</p></li><li><p>分为两类</p><p>共享内存互联网络</p><p>分布式内存互联网络</p><p>=======================草，从这往后好像都没讲草草草草</p></li></ul><h5 id="共享内存互联网络"><a href="#共享内存互联网络" class="headerlink" title="共享内存互联网络"></a>共享内存互联网络</h5><ul><li><p>总线互连</p><ul><li>需要排队，但成本低</li><li>随着连接到总线的设备数量的增加，对总线 的使用的竞争会增加，性能会下降。</li></ul></li><li><p>交换互连网络</p><p>灵活但造价高</p><p>允许<strong>不同设备</strong>之间<strong>同时</strong>进行通信</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231827338.png" alt="image-20221023182726222" style="zoom: 50%;"><h6 id="cache一致性问题"><a href="#cache一致性问题" class="headerlink" title="cache一致性问题"></a>cache一致性问题</h6><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o682zywcj30gw0osjsp.jpg" alt="image-20221031083552339"></p><p>Y1，z1为1号核的私有变量</p><p>y0为0号核的私有变量</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o6bou6v7j30xu0e2myq.jpg" alt="image-20221031083920604"></p></li><li><p>监听cache一致性协议</p><ul><li>core0更新x时，会在总线上广播更新信息，core1可以监听到（⚠️不是直接传递x的信息，而是广播共享）</li></ul></li><li><p>基于目录的cache一致性协议</p><ul><li>使用一个叫做<strong>目录</strong>的结构，存储每个内存行的状态</li><li>当一个变量需要更新时，就会查询目录，并将所有包含该<strong>变量</strong>的高速缓存行设置为非法</li></ul></li></ul><h5 id="分布式内存互联网络"><a href="#分布式内存互联网络" class="headerlink" title="分布式内存互联网络"></a>分布式内存互联网络</h5><h6 id="分为两种：直接互连（要求全部掌握）、间接互连"><a href="#分为两种：直接互连（要求全部掌握）、间接互连" class="headerlink" title="分为两种：直接互连（要求全部掌握）、间接互连"></a>分为两种：直接互连（要求全部掌握）、间接互连</h6><ul><li><p>直接互连</p><ul><li><p>每个交换器与一个处理器-内存对直接相连，交换器之间也互相连接</p></li><li><p>一个环</p><p>可以同时进行通信</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231835525.png" alt="image-20221023183528459" style="zoom:50%;"></li><li><p>二维环面网络</p><p>可以同时进行信息交换的节点更多</p><p>造价更高</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231836859.png" alt="image-20221023183648796" style="zoom: 33%;"></li></ul></li><li><p>间接互连</p><ul><li><p>交换器不一定与处理器直接相连</p></li><li><p>间接网络中相对简单的例子：</p><ul><li><p>交叉开关矩阵</p><p>区分<strong>共享互联网络</strong>中的交叉开关矩阵</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231925922.png" alt="image-20221023192547825" style="zoom:33%;"></li><li><p>Omega网络</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o5yhbdsaj30p00nymyn.jpg" alt="image-20221031082637682"></p></li></ul></li></ul></li></ul><h6 id="一些定义（直接互连中）"><a href="#一些定义（直接互连中）" class="headerlink" title="一些定义（直接互连中）"></a>一些定义（直接互连中）</h6><ul><li><p>等分宽度（需要会计算</p><ul><li><p>衡量“同时通信的链路数目”或者“连接性”的一个标准</p></li><li><p>想象并行系统被分成两部分，每部分都 有一半的处理器或者节点。在这两部份 之间能同时发生多少通信呢？</p></li><li><p>例1：一个环的两种等分<img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231845256.png" alt="image-20221023184507171"></p><p>等分宽度求的是最少的情况下的同时通信链路数目</p><p>这个环的等分宽度是2而不是4</p></li><li><p>例2：一个二维环面网格的等分</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231852261.png" alt="image-20221023185215144" style="zoom: 25%;"><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231852924.png" alt="image-20221023185239861" style="zoom: 33%;"><p>把红线全部删掉才能把网格结构<strong>等分成两份</strong>，把两部分完全分开，由图一变成图二，要剪断<strong>8</strong>根线</p><p><strong>总结</strong>：</p><p>二维环面网格的<strong>等分宽度</strong>为<strong>2*p^(0.5)</strong></p><p>p表示处理器的数目</p></li></ul></li><li><p>延迟</p><ul><li>指从发送源开始传送数据到目的地开始接受数据之间的时间</li><li><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o611kz3fj30qm0ikwg2.jpg" alt="image-20221031082906633"></li></ul></li><li><p>带宽</p><ul><li>传输数据的速度</li><li>通常用兆位每秒或者兆字节每秒来表示</li></ul></li><li><p>等分带宽</p><ul><li>等分带宽=等分宽度×带宽</li><li>用来衡量网络的质量</li><li>不是计算连接两个等分之间的链路数，而是计算链路的带宽</li></ul></li></ul><h6 id="几个直接互连的例子"><a href="#几个直接互连的例子" class="headerlink" title="几个直接互连的例子"></a>几个直接互连的例子</h6><ul><li><p>全相连网络</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231906924.png" alt="image-20221023190651837"></li><li>等分宽度太大，造价高，不切实际</li></ul></li><li><p>超立方体</p><ul><li>假如维度为d，则有2^d（p=2^d）个节点，等分宽度为p➗2</li></ul></li></ul><table><thead><tr><th>结构</th><th>图片</th><th>等分宽度（p为交换器数目）</th></tr></thead><tbody><tr><td>环</td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231915846.png" alt="image-20221023191549780" style="zoom:25%;"></td><td>2</td></tr><tr><td>二维环面网状结构</td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231917760.png" alt="image-20221023191734686" style="zoom:25%;"></td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231916152.png" alt="image-20221023191644099" style="zoom:25%;"></td></tr><tr><td>超立方体</td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231918391.png" alt="image-20221023191804315" style="zoom:25%;"></td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231918813.png" alt="image-20221023191829753" style="zoom:25%;"></td></tr></tbody></table><p>当p&gt;4时，性能：超立方体结构&gt;二维环面网状结构、环</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><hr><p>下面这块是从w4l2开始的，中间部分老师跳过了</p><h2 id="并行算法分析"><a href="#并行算法分析" class="headerlink" title="并行算法分析"></a>并行算法分析</h2><h3 id="基本指标-🌟必考"><a href="#基本指标-🌟必考" class="headerlink" title="基本指标(🌟必考)"></a>基本指标(🌟必考)</h3><ul><li><p>串行算法评价：</p><ul><li>算法时间复杂度表示为<strong>输入规模</strong>的函数</li></ul></li><li><p>并行算法评价</p><ul><li><p>除了输入规模之外，还需要考虑处理器的树木、处理器相对运算速度、通信速度</p></li><li><p>运行时间</p></li><li><p>加速比：选择串行算法<strong>最优</strong>的时间和并行算法时间做除法</p><ul><li>默认串行算法和并行算法所用的处理器相同</li></ul><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102104746771.png" alt="image-20221102104746771"></p></li></ul></li></ul><h4 id="加速比"><a href="#加速比" class="headerlink" title="加速比"></a>加速比</h4><ul><li><p>例</p><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102105459233.png" alt="image-20221102105459233"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102105529255.png" alt="image-20221102105529255"></p></li><li><p>初始：每个进程保存一个数，最终由一个进程保存累加和</p></li><li><p>树形结构：logn个步骤</p><p>每个步骤进行一次加法：</p><p>和一个机器字的传输</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102112240099.png" alt="image-20221102112240099"></p><p>没懂？？？</p></li></ul></li><li><p>例。加速比的计算（‼️考试容易考）</p><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102112435610.png" alt="image-20221102112435610"></p></li><li><p>p为核数</p></li><li><p>搜索分解导致超线性的例子</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102113015030.png" alt="image-20221102113015030"></p></li></ul></li></ul><h5 id="阿姆达尔定律"><a href="#阿姆达尔定律" class="headerlink" title="阿姆达尔定律"></a>阿姆达尔定律</h5><ul><li><p>定义</p><ul><li>除非一个串行程序的执行几乎全部都并行化，否则不论多少可以利用的核，通过并行化所产生的加速比都会是受限的</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102200500482.png" alt="image-20221102200500482"></li></ul></li><li><p>例子</p><ul><li><p>理想化：0.9的可完全并行，拥有线性加速比<img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102200035338.png" alt="image-20221102200035338"></p></li><li><p>从公式可以看出来，s和串行程序运行时间是无关的</p></li></ul></li></ul><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><ul><li><p>效率：度量有效计算时间</p></li><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102200902075.png" alt="image-20221102200902075"></p></li><li><p>例1</p><ul><li>n个核对n个数求和</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102201204778.png" alt="image-20221102201204778"></li></ul></li><li><p>例2</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102201235794.png" alt="image-20221102201235794"></li></ul></li></ul><h4 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h4><ul><li><p>我们希望，保持问题规模不变时，效率不随着线程数的增加而降低，则称程序是可扩展的</p><ul><li>强扩展的</li></ul></li><li><p>问题规模增大时，效率不随着线程数的增加而降低，则称程序是可扩展的</p><ul><li>弱扩展的</li></ul></li><li><p>例子</p><p> <img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102203837409.png" alt="image-20221102203837409"></p></li><li><p>例子：快速傅立叶变换</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102204141865.png" alt="image-20221102204141865"></li></ul></li></ul><h3 id="并行程序设计的复杂性"><a href="#并行程序设计的复杂性" class="headerlink" title="并行程序设计的复杂性"></a>并行程序设计的复杂性</h3><ul><li>足够的并发度</li><li>并发粒度<ul><li>独立的计算任务的大小</li></ul></li><li>局部性<ul><li>对临近数据进行计算</li><li>尽量减少数据的计算，对离得比较近的数据进行计算</li></ul></li><li>负载均衡<ul><li>每个处理器工作量相近</li></ul></li><li>协调和同步</li></ul><h3 id="并行算法额外开销"><a href="#并行算法额外开销" class="headerlink" title="并行算法额外开销"></a>并行算法额外开销</h3><ul><li>进程间通信<ul><li>也可能是线程通信</li><li>最大开销，大部分并行算法都需要</li></ul></li><li>进程空闲<ul><li>负载不均，同步操作，不能并行化的部分</li></ul></li><li>额外计算<ul><li>最优串行算法难以并行化，将很差的串行算法并行化，并行算法计算量&gt;最优串行算法</li><li>最优串行算法并行化也会产生额外计算<ul><li>并行快速傅立叶变换</li><li>旋转因子的重复计算</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并行程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行程序设计 </tag>
            
            <tag> S5课上 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog 说明</title>
      <link href="/2021/09/07/hello-world/"/>
      <url>/2021/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generatehexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deployhexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo new "name"       # 新建文章hexo new page "name"  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Font-matter"><a href="#Font-matter" class="headerlink" title="Font-matter"></a>Font-matter</h2><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h2><p>每篇博文都是按照 <strong>“科目/项目-名字”</strong> 的形式命名的。其中归类是按照 <strong>“科目/项目”</strong> 进行归类</p><p>对于标签，呈现 <strong>“2 + n”</strong> 的结构，<strong>2</strong> 指的是每个博文都有一个“科目/项目”标签，一个“时间标签”，每个学期都会分为“课上”，“复习”，“假期”3个标签，用于细化时间节点。<strong>n</strong> 文章的属性，应该有以下几种：</p><table><thead><tr><th align="left">类别</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">工具总结</td><td align="left">包括数学工具，办公工具，各种软件的使用方法</td></tr><tr><td align="left">知识总结</td><td align="left">是对所学内容的系统梳理，这种文章应该都是比较系统、全面，但是也比较死板</td></tr><tr><td align="left">直观理解</td><td align="left">这方面记录了很多直观化的知识，但是相应的，也比较跳脱，不严谨</td></tr><tr><td align="left">吃喝玩乐</td><td align="left">生活记录</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> blog说明 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 说明 </tag>
            
            <tag> S6课上 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
