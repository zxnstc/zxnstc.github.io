<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并行程序设计-第六讲.MPI编程</title>
      <link href="/2022/11/13/di-liu-jiang-mpi-bian-cheng/"/>
      <url>/2022/11/13/di-liu-jiang-mpi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第六讲-MPI编程"><a href="#第六讲-MPI编程" class="headerlink" title="第六讲 MPI编程"></a>第六讲 MPI编程</h1><h2 id="MPI概念和基本原语"><a href="#MPI概念和基本原语" class="headerlink" title="MPI概念和基本原语"></a>MPI概念和基本原语</h2><h3 id="消息传递和MPI"><a href="#消息传递和MPI" class="headerlink" title="消息传递和MPI"></a>消息传递和MPI</h3><ul><li>消息传递是超级计算机和集群主要的编程模型</li><li>MPI是什么<ul><li>消息传递编程模型标准，取代专有库</li><li>编程角度</li><li>基于单程序多数据流（SPMD）</li><li>隔离了独立地址空间<ul><li>不会有数据竞争，但可能有通信错误</li></ul></li></ul></li></ul><h3 id="消息传递库特性"><a href="#消息传递库特性" class="headerlink" title="消息传递库特性"></a>消息传递库特性</h3><ul><li><p>所有通信、同步都需调用函数完成</p><ul><li><strong>无共享变量</strong></li></ul></li><li><p>提供如下类别的函数</p><ul><li><p>通信</p><ul><li>点对点通信：消息从特性的发送<strong>进程</strong>（点A）发送到特定的接收进程（点B）</li><li>多处理器参与的组通信<ul><li>移动数据：广播、散发/收集</li><li>计算并移动数据：归约、全归约</li></ul></li></ul></li><li><p>同步</p><ul><li>障碍</li><li>无锁机制，因为没有共享变量需要保护</li></ul></li><li><p>查询</p><ul><li>多少个进程？哪个是我？有处于等待状态的信息？</li></ul></li></ul></li></ul><h3 id="基本接口"><a href="#基本接口" class="headerlink" title="基本接口"></a>基本接口</h3><ul><li>MPI_Comm_size报告进程数<ul><li>int MPI_Comm_size(MPI_Comm comm,int *size)</li></ul></li><li>MPI_Comm_rank报告识别调用进程的rank，值从0～size-1<ul><li>int MPI_Comm_rank(MPI_Comm comm,int *rank)</li></ul></li></ul><h4 id="编译–Linux平台"><a href="#编译–Linux平台" class="headerlink" title="编译–Linux平台"></a>编译–Linux平台</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121144656484.png" alt="image-20221121144656484"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121144808070.png" alt="image-20221121144808070"></p><h4 id="运行MPI程序"><a href="#运行MPI程序" class="headerlink" title="运行MPI程序"></a>运行MPI程序</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121145434261.png" alt="image-20221121145434261"></p><h4 id="MPI初始化和结束处理"><a href="#MPI初始化和结束处理" class="headerlink" title="MPI初始化和结束处理"></a>MPI初始化和结束处理</h4><ul><li><p>MPI_Init</p><ul><li>令MPI进行必要的初始化工作</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121145615335.png" alt="image-20221121145615335"></li></ul></li><li><p>MPI_Finalize</p><ul><li>告诉MPI程序已结束，进行清理工作</li><li>int MPI_Finalize(void)</li></ul></li></ul><h4 id="MPI程序基本结构"><a href="#MPI程序基本结构" class="headerlink" title="MPI程序基本结构"></a>MPI程序基本结构</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121145951697.png" alt="image-20221121145951697"></p><h3 id="MPI消息传递"><a href="#MPI消息传递" class="headerlink" title="MPI消息传递"></a>MPI消息传递</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121150207143.png" alt="image-20221121150207143"></p><ul><li>消息传递最基本的函数：<ul><li>send <ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121151703266.png" alt="image-20221121151703266"></li></ul></li><li>receive<ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121151832262.png" alt="image-20221121151832262"></li></ul></li></ul></li><li><h2 id="需要明确-如何描述数据-MPI强数据类型-在传输之前必须指明数据是什么类型、数据个数等信息-如何标识进程-rank-接收方如何识别信息"><a href="#需要明确-如何描述数据-MPI强数据类型-在传输之前必须指明数据是什么类型、数据个数等信息-如何标识进程-rank-接收方如何识别信息" class="headerlink" title="需要明确- 如何描述数据  - MPI强数据类型  - 在传输之前必须指明数据是什么类型、数据个数等信息- 如何标识进程  - rank- 接收方如何识别信息"></a>需要明确<br>- 如何描述数据<br>  - MPI强数据类型<br>  - 在传输之前必须指明数据是什么类型、数据个数等信息<br>- 如何标识进程<br>  - rank<br>- 接收方如何识别信息</h2><ul><li>操作完成意味着什么</li></ul></li></ul><h3 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121152126455.png" alt="image-20221121152126455"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121152225212.png" alt="image-20221121152225212"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221121152446813.png" alt="image-20221121152446813"></p><p>这块看pppt</p><h2 id="MPI编程模型"><a href="#MPI编程模型" class="headerlink" title="MPI编程模型"></a>MPI编程模型</h2>]]></content>
      
      
      <categories>
          
          <category> 并行程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行程序设计 </tag>
            
            <tag> S5课上 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行程序设计-第五讲.openmp编程</title>
      <link href="/2022/10/18/di-wu-jiang-openmp/"/>
      <url>/2022/10/18/di-wu-jiang-openmp/</url>
      
        <content type="html"><![CDATA[<h1 id="第五讲-openmp"><a href="#第五讲-openmp" class="headerlink" title="第五讲 openmp"></a>第五讲 openmp</h1><h2 id="OpenMP并行模型"><a href="#OpenMP并行模型" class="headerlink" title="OpenMP并行模型"></a>OpenMP并行模型</h2><h3 id="程序员视角"><a href="#程序员视角" class="headerlink" title="程序员视角"></a>程序员视角</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114104633837.png" alt="image-20221114104633837"></p><h4 id="执行模型"><a href="#执行模型" class="headerlink" title="执行模型"></a>执行模型</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114104747893.png" alt="image-20221114104747893"></p><h4 id="编程环境配置"><a href="#编程环境配置" class="headerlink" title="编程环境配置"></a>编程环境配置</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114104917033.png" alt="image-20221114104917033"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114104938547.png" alt="image-20221114104938547"></p><h3 id="编程模型"><a href="#编程模型" class="headerlink" title="编程模型"></a>编程模型</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114105212217.png" alt="image-20221114105212217"></p><h4 id="编译指示格式"><a href="#编译指示格式" class="headerlink" title="编译指示格式"></a>编译指示格式</h4><ul><li>编译指示格式<ul><li>#pragma omp directive_name[clause[clause]……]</li></ul></li><li>条件编译<ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114105619319.png" alt="image-20221114105619319"></li><li>如果使用的平台支持openmp则。。</li><li>不支持的话就按照串行方式，保证结果正确</li></ul></li><li>大小写敏感</li><li>使用库函数需要包含头文件</li></ul><h4 id="运行时库，查询函数"><a href="#运行时库，查询函数" class="headerlink" title="运行时库，查询函数"></a>运行时库，查询函数</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114105948585.png" alt="image-20221114105948585"></p><h4 id="并行区域结构"><a href="#并行区域结构" class="headerlink" title="并行区域结构"></a>并行区域结构</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114110155127.png" alt="image-20221114110155127"></p><h4 id="hello-world程序"><a href="#hello-world程序" class="headerlink" title="hello world程序"></a>hello world程序</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;omp.h&gt;void Hello(void);int main(int argc,char* argv[]){  int thread_count=strtol(argv[1],NULL,10);    #pragma omp parallel num_threads(thread_count)  Hello();    return 0;}void Hello(void){  int my_rank=omp_get_thread_num();  int thread_count=omp_get_num_threads();    print("Hello from thread %d of %d\n",my_rank,thread_count);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为防止编译器不支持openMP</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114111804810.png" alt="image-20221114111804810"></p><h4 id="梯形积分法"><a href="#梯形积分法" class="headerlink" title="梯形积分法"></a>梯形积分法</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114112046950.png" alt="image-20221114112046950"></p><h4 id="临界区指令"><a href="#临界区指令" class="headerlink" title="临界区指令"></a>临界区指令</h4><p>归约 </p><h2 id="并行循环"><a href="#并行循环" class="headerlink" title="并行循环"></a>并行循环</h2><h3 id="OpenMp数据并行：并行循环"><a href="#OpenMp数据并行：并行循环" class="headerlink" title="OpenMp数据并行：并行循环"></a>OpenMp数据并行：并行循环</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114141348225.png" alt="image-20221114141348225"></p><h3 id="局限和语义"><a href="#局限和语义" class="headerlink" title="局限和语义"></a>局限和语义</h3><p>必须提前看到for循环就能看到有多少任务</p><p>带break、goto之类的不支持</p><p>不支持依赖的（例如斐波那契数列，每次计算都要用到前面的数）</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114142008518.png" alt="image-20221114142008518"></p><h3 id="简单并行化循环的版本"><a href="#简单并行化循环的版本" class="headerlink" title="简单并行化循环的版本"></a>简单并行化循环的版本</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114142232525.png" alt="image-20221114142232525"></p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>openmp隐式同步</p><p>在要并行的语句前隐式的有开始并行和join之类的</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114142437576.png" alt="image-20221114142437576"></p><h3 id="并行for指示的各种形式"><a href="#并行for指示的各种形式" class="headerlink" title="并行for指示的各种形式"></a>并行for指示的各种形式</h3><h2 id="数据依赖（中间跳过了一部分，只讲了下面的几个ppt，跳过p39、）"><a href="#数据依赖（中间跳过了一部分，只讲了下面的几个ppt，跳过p39、）" class="headerlink" title="数据依赖（中间跳过了一部分，只讲了下面的几个ppt，跳过p39、）"></a>数据依赖（中间跳过了一部分，只讲了下面的几个ppt，跳过p39、）</h2><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114142745626.png" alt="image-20221114142745626"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114143132650.png" alt="image-20221114143132650"></p><p>第一个存在数据依赖</p><p>第二个不存在依赖</p><ul><li><p>例子</p><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114143408845.png" alt="image-20221114143408845"></p></li><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114143519896.png" alt="image-20221114143519896"></p></li><li><p>气泡排序（🌟）</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114143824119.png" alt="image-20221114143824119"></p><p>内层和外层哪个存在循环依赖？？</p><p>都存在</p><p>外层：每次循环数组的顺序都发生了变化，下一次循环依赖上次循环的结果，存在循环依赖关系</p><p>内层，每次都要比较a[i]和a[i+1],并要交换两者位置，存在循环依赖关系</p></li><li><p>气泡排序内外层都存在依赖，怎么进行并行化</p><ul><li>解决方法</li><li>第一轮奇数项和他的下一个比较，第二轮偶数项和她的下一个比较</li><li>每一轮之间不存在依赖了</li><li>串行的代码<ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114150929703.png" alt="image-20221114150929703"></li></ul></li><li>并行代码<ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114150549415.png" alt="image-20221114150549415"></li><li>有什么问题</li><li>每次大循环的时候频繁地创建线程以及销毁线程，耗费系统资源</li><li>怎么改进？</li><li>把创建线程拿到大循环外面</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114150633942.png" alt="image-20221114150633942"></li><li>不用加parrallel_for啥的，因为不是对外循环并行化。只是现在外面生成线程，在执行内循环的时候在写pragma omp for，把任务分到线程上</li></ul></li></ul></li></ul></li></ul><h2 id="循环调度"><a href="#循环调度" class="headerlink" title="循环调度"></a>循环调度</h2><p>什么都不写的话默认static，最大块</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114153015722.png" alt="image-20221114153015722"></p><h3 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114151337679.png" alt="image-20221114151337679"></p><p>不指定的话默认为threads，指定的话变成循环分配，下面是制定了static（2）</p><p>在执行任务之前划分好，执行的时候</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114151712217.png" alt="image-20221114151712217"></p><h3 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h3><p>谁先执行好把剩下的最后一块给哪个线程</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114151913079.png" alt="image-20221114151913079"></p><h3 id="guided动态划分"><a href="#guided动态划分" class="headerlink" title="guided动态划分"></a>guided动态划分</h3><p>剩余任务数➗二倍的线程数</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114152516458.png" alt="image-20221114152516458"></p><h3 id="更多属性"><a href="#更多属性" class="headerlink" title="更多属性"></a>更多属性</h3><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114152850597.png" alt="image-20221114152850597"></p><h2 id="局部性"><a href="#局部性" class="headerlink" title="局部性"></a>局部性</h2><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114154109286.png" alt="image-20221114154109286"></p><p>重用</p><p>===========中间跳过了</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114154155141.png" alt="image-20221114154155141"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221114154240600.png" alt="image-20221114154240600"></p><p>后面全都跳过了</p><h2 id="任务并行"><a href="#任务并行" class="headerlink" title="任务并行"></a>任务并行</h2>]]></content>
      
      
      <categories>
          
          <category> 并行程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行程序设计 </tag>
            
            <tag> S5课上 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行程序设计-第四讲.Pthread编程</title>
      <link href="/2022/10/03/di-si-jiang-duo-xian-cheng-pthread-bian-cheng/"/>
      <url>/2022/10/03/di-si-jiang-duo-xian-cheng-pthread-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第四讲-多线程Pthread编程"><a href="#第四讲-多线程Pthread编程" class="headerlink" title="第四讲 多线程Pthread编程"></a>第四讲 多线程Pthread编程</h1><h2 id="共享内存系统和分布式内存模型回顾"><a href="#共享内存系统和分布式内存模型回顾" class="headerlink" title="共享内存系统和分布式内存模型回顾"></a>共享内存系统和分布式内存模型回顾</h2><h3 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h3><ol><li><p>cache按照行读取</p></li><li><p>当多个处理器访问同一行，即使访问的是不同的机器字，也会潜在竞争</p></li><li><p>会产生不必要的协同开销</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7oggjpznoj30m20aiwf1.jpg" alt="image-20221031143000351"></p><ol><li>当数据很少的时候，Core1和Core0访问的是同一行，同一个缓存行里的不同变量在同时被修改</li></ol></li></ol><h3 id="共享内存编程"><a href="#共享内存编程" class="headerlink" title="共享内存编程"></a>共享内存编程</h3><ol><li>动态线程<ol><li>主线程等待计算工作，fork新线程分配工作，工作线程完成任务后结束</li><li>资源利用率高</li></ol></li><li>主线程完成时fork出<strong>所有线程</strong><ol><li>性能更优，但可能浪费系统资源</li></ol></li></ol><h3 id="并行程序设计的复杂性"><a href="#并行程序设计的复杂性" class="headerlink" title="并行程序设计的复杂性"></a>并行程序设计的复杂性</h3><h2 id="POSIX-Threads编程"><a href="#POSIX-Threads编程" class="headerlink" title="POSIX Threads编程"></a>POSIX Threads编程</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>线程库：</p><ul><li>Pthread是POSIX标准<ul><li>相对底层</li><li>可移植</li></ul></li><li>OpenMP是新标准<ul><li>高层编程，适用于共享内存架构上的科学计算</li></ul></li></ul><h4 id="POSIX-Thread"><a href="#POSIX-Thread" class="headerlink" title="POSIX Thread"></a>POSIX Thread</h4><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7oguexqwnj30zo0m8djv.jpg" alt="image-20221031144319854"></p><h3 id="基础API"><a href="#基础API" class="headerlink" title="基础API"></a>基础API</h3><h4 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token class-name">pthread_t</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token class-name">pthread_attr_t</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token comment">//pthread_t不透明，程序员不可操作</span>  <span class="token comment">//调用</span>errcode<span class="token operator">=</span><span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread_id<span class="token punctuation">,</span><span class="token operator">&amp;</span>thread_attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>thread_fun<span class="token punctuation">,</span><span class="token operator">&amp;</span>fun_arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>thread_id<ul><li>指针：线程ID或句柄（用于停止线程）</li></ul></li><li>thread_attribute:<ul><li>各种属性，通常用空指针<strong>NULL</strong>表示标准默认属性值</li></ul></li><li>thread_fun<ul><li>新线程要运行的函数（参数和返回值类型都是void*）</li></ul></li><li>fun_arg<ul><li>传递给要运行的函数thread_fun的参数</li></ul></li><li>errorocode<ul><li>若创建失败，返回非零值</li></ul></li></ul><p>![image-20221031151330065](/Users/zhangxiaoni/Library/Application Support/typora-user-images/image-20221031151330065.png)</p><h4 id="Pthread-“hello-world”程序"><a href="#Pthread-“hello-world”程序" class="headerlink" title="Pthread “hello world”程序"></a>Pthread “hello world”程序</h4><p>![image-20221031152746925](/Users/zhangxiaoni/Library/Application Support/typora-user-images/image-20221031152746925.png)</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;pthread.h&gt; int thread_count;void* Hello(void* rank)int main(int argc,char* argv[]){  long thread;  pthread_t* thread_handles;    thread_count=strto(argv[1],NULL,10);    thread_handles=(pthread_t*)malloc(thread_count*sizeof(pthread_t*));    for(thread=0;thread&lt;thread_count;thread++) pthread_create(&amp;thread_handles[thread],NULL,Hello,(void*)thread);    printf("Hello from the main thread\n");    for(thread=0;thread&lt;thread_count;thread++);  pthread_join(thread_handles[thread],NULL);    free(thread_handles);  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pthread其他基础API"><a href="#Pthread其他基础API" class="headerlink" title="Pthread其他基础API"></a>Pthread其他基础API</h4><ul><li><p>取消、结束线程</p><ul><li><p>void pthread_exit(void *value_ptr)</p><ul><li>显式取消线程</li><li>通过value_ptr返回结果给调用者</li></ul></li><li><p>int pthread_cnacel(pthread_t thread)</p><ul><li><p>取消线程thread执行</p></li><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107141515838.png" alt="image-20221107141515838"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107141538026.png" alt="image-20221107141538026"></p></li></ul></li></ul></li></ul><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li><p>例子 估算pai</p><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107142015679.png" alt="image-20221107142015679"></p></li><li><p>多线程版本</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107142246876.png" alt="image-20221107142246876"></p><p>问题：每个线程都要把数加到<strong>sum</strong>上面，会存在竞争，结果是错误的</p></li></ul></li></ul><h4 id="概念回顾"><a href="#概念回顾" class="headerlink" title="概念回顾"></a>概念回顾</h4><ul><li><p>原子性</p><ul><li>一组操作要么全部执行要么全不执行，则称其是原子性的</li></ul></li><li><p>临界区</p><ul><li>共享资源的代码段，一次只能允许一个线程执行该代码</li></ul></li><li><p>竞争条件</p><ul><li>多个线程/进程尝试更新同一个共享资源时，结果可能是无法预测的，则存在竞争</li><li>如果存在竞争则创建临界区</li></ul></li><li><p>数据依赖</p><ul><li>两个<strong>内存</strong>的序。为了保证结果正确性，必须保持这个序</li></ul></li><li><p>同步</p><ul><li>时间上强制使各执行进程/线程在某一点必须互相等待，确保各进程/线程的正常顺序和对共享可写数据的正确访问。</li></ul></li></ul><h4 id="忙等待"><a href="#忙等待" class="headerlink" title="忙等待"></a>忙等待</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107143703393.png" alt="image-20221107143703393"></p><ul><li>临界区的这段代码保证了各个进程是按照序号进行相加</li><li>这个等待消耗cpu资源</li></ul><h4 id="显式同步：互斥量（锁）"><a href="#显式同步：互斥量（锁）" class="headerlink" title="显式同步：互斥量（锁）"></a>显式同步：互斥量（锁）</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107144116394.png" alt="image-20221107144116394"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107144218073.png" alt="image-20221107144218073"></p><ul><li>这个版本线程不一定按照从小到大的顺序来，使用互斥量的效率更高，先执行完的不需要等待<ul><li>操作系统选择顺序，谁先执行完谁先来</li><li>被锁上的处于阻塞态，不占用cpu资源</li></ul></li><li>锁只能保证一段时间内只有线程运行</li></ul><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107150037798.png" alt="image-20221107150037798"></p><h4 id="使用信号量同步"><a href="#使用信号量同步" class="headerlink" title="使用信号量同步"></a>使用信号量同步</h4><h4 id="使用barrier同步"><a href="#使用barrier同步" class="headerlink" title="使用barrier同步"></a>使用barrier同步</h4><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221107151930138.png" alt="image-20221107151930138"></p>]]></content>
      
      
      <categories>
          
          <category> 并行程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行程序设计 </tag>
            
            <tag> S5课上 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行程序设计-第三讲.SIMD编程</title>
      <link href="/2022/09/25/di-san-jiang.simd-bian-cheng/"/>
      <url>/2022/09/25/di-san-jiang.simd-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="SIMD编程"><a href="#SIMD编程" class="headerlink" title="SIMD编程"></a>SIMD编程</h1><h2 id="SIMD概念"><a href="#SIMD概念" class="headerlink" title="SIMD概念"></a>SIMD概念</h2><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241415541.png" alt="image-20221024141506247" style="zoom:33%;"><p>SPMD单个程序在不同数据流上执行</p><p>本讲主要介绍单核向量编程</p><h3 id="SIMD编程概述"><a href="#SIMD编程概述" class="headerlink" title="SIMD编程概述"></a>SIMD编程概述</h3><ul><li><p>向量计算机</p></li><li><p>早期的SIMD超级计算机：银河</p></li><li><p>当前的SIMD架构</p><ul><li>多媒体扩展：SSE、AVX</li><li>图形和游戏处理器：CUDA</li><li>协处理器：Xeon Phi</li></ul></li><li><p>没有占压倒优势的SIMD编程模型</p><ul><li>向量计算机都是科学家用来编程 </li><li>多媒体扩展指令集多是系统程序员在用</li><li>GPU多是游戏开发者、大数据分析人员使用</li></ul></li><li><p>标量和SIMD（多媒体扩展架构）差别</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241428129.png" alt="image-20221024142859008" style="zoom:25%;"></li></ul></li><li><p>多媒体扩展架构的核心</p><ul><li><p>SIMD并行</p></li><li><p>可变大小的数据域</p></li><li><p>向量长度=寄存器宽度➗类型大小</p></li><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241436940.png" alt="image-20221024143637806"></p><p>这里有128位寄存器，存储数据的大小由数据类型决定，比如如果存储长整型（32字节）的话，只能支持4个数同时计算</p></li></ul></li><li><p>适合应用SIMD的特点</p><ul><li><strong>规律</strong>的数据访问模式<ul><li>数据项在内存中<strong>连续存储</strong></li></ul></li><li><strong>短数据</strong>类型：8、16、32位</li><li><strong>流式</strong>数据处理，一系列处理阶段<ul><li>时间局域性，<strong>数据流重用</strong></li></ul></li><li>很多情况下可用来提升计算效率<ul><li>很多常量</li><li>循环迭代短</li></ul></li></ul></li><li><p>为什么采用SIMD</p><ul><li>更大的并发度</li><li>设计简单、重复功能单元即可</li><li>更小的芯片设计</li><li>缺点：代码很底层繁琐</li></ul></li><li><p>多媒体扩展编程</p><ul><li><p>语言/指令集扩展</p><ul><li><p>程序接口类似函数调用</p></li><li><p>C/C++：内置函数、 intrinsics</p></li><li><p>大多数编译器支持多媒体扩展</p><p>➢gcc：-march=corei7, -faltivec </p><p>SSE2: dst= _mm_add_ps(src1, src2); </p><p>AltiVec: dst= vec_add(src1, src2); </p><p>Neon： dst = vaddq_f32(src1, src2) </p><p>➢无统一标准</p></li><li><p>很多编译器支持自动编译</p></li></ul></li></ul></li></ul><h2 id="SIMD并行（不是很重要，了解即可）"><a href="#SIMD并行（不是很重要，了解即可）" class="headerlink" title="SIMD并行（不是很重要，了解即可）"></a>SIMD并行（不是很重要，了解即可）</h2><h3 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h3><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241454764.png" alt="image-20221024145431584" style="zoom:25%;"><p>把重复的算术运算变成向量运算</p></li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241502598.png" alt="image-20221024150231461" style="zoom:25%;"><p>存取数据的次数降低，效率提升</p></li><li><p>可向量化的循环</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241503733.png" alt="image-20221024150338675" style="zoom:33%;"><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241504259.png" alt="image-20221024150422081" style="zoom:33%;"></li><li><p>可部分向量化的循环（有数据依赖）</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241506128.png" alt="image-20221024150628063" style="zoom:25%;"><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241506150.png" alt="image-20221024150649061" style="zoom:25%;"></li></ul><h3 id="SIMD编程的额外开销"><a href="#SIMD编程的额外开销" class="headerlink" title="SIMD编程的额外开销"></a>SIMD编程的额外开销</h3><h4 id="打包-x2F-解包数据的开销：重排数据使之连续"><a href="#打包-x2F-解包数据的开销：重排数据使之连续" class="headerlink" title="打包/解包数据的开销：重排数据使之连续"></a>打包/解包数据的开销：重排数据使之连续</h4><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241514360.png" alt="image-20221024151459299" style="zoom:33%;"></li><li>打包源运算对象——拷贝到连续内存区域<ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241515632.png" alt="image-20221024151536575" style="zoom:33%;"></li></ul></li><li>解包目的运算对象——拷贝回内存<ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241516236.png" alt="image-20221024151628154"></li></ul></li></ul><h4 id="对齐：调整数据访问，使之对齐"><a href="#对齐：调整数据访问，使之对齐" class="headerlink" title="对齐：调整数据访问，使之对齐"></a>对齐：调整数据访问，使之对齐</h4><ul><li><p>对齐的内存访问 </p><ul><li>地址总是向量长度的倍数（例如16字节）</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241523674.png" alt="image-20221024152331590" style="zoom: 33%;"></li></ul></li><li><p>未对齐的内存访问</p><ul><li><p>地址不是16字节的整数倍</p></li><li><p>静态对齐：对未对齐的读操作，做两次相邻的对齐读操作，然后进行合并</p></li><li><p>有未对齐相应操作函数，仍会产生<strong>多次内存操作</strong></p></li><li><p>底层硬件的操作：<img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241525183.png" alt="image-20221024152556088"></p></li><li><p><strong>静态</strong>调整循环</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241532617.png" alt="image-20221024153232518" style="zoom:25%;"></li><li><p>动态对齐：</p><p>不知道从几开始，虽然有额外的对齐开销，但是结果一定是正确的</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210241533834.png" alt="image-20221024153357734"></p></li></ul></li><li><p>小结</p><ul><li><p>最坏情况需要计算地址，动态对齐</p></li><li><p>编译器/程序员可分析确认对齐</p><ul><li>一般而言数据是从<strong>起始地址处对齐</strong>的</li><li>如果在一个循环中顺序访问数据，<strong>起始位置固定</strong>，则对齐特性是不变的</li></ul></li><li><p>可调整算法，先串行处理到对齐边界， 然后进行SIMD计算 </p></li><li><p>有时对齐开销会完全抵消SIMD的并行收 益</p></li></ul></li></ul><h4 id="控制流可能要求执行所有路径"><a href="#控制流可能要求执行所有路径" class="headerlink" title="控制流可能要求执行所有路径"></a>控制流可能要求执行所有路径</h4><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251621039.png" alt="image-20221025162120878"></p></li><li><p>底层实现</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251622289.png" alt="image-20221025162249109" style="zoom:33%;"></li><li><p>能否改进</p><ul><li>假定所有控制流路径执行频率都不同</li><li>应该针对频率最高的路径优化代码</li><li>其他路经按默认方式执行</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251624368.png" alt="image-20221025162455276" style="zoom:33%;"></li></ul></li><li><p>控制流开销小结</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251626006.png" alt="image-20221025162609859" style="zoom: 25%;"></li></ul><h3 id="SIMD编程复杂性"><a href="#SIMD编程复杂性" class="headerlink" title="SIMD编程复杂性"></a>SIMD编程复杂性</h3><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251627096.png" alt="image-20221025162755998" style="zoom:25%;"><h2 id="SSE-x2F-AVX编程"><a href="#SSE-x2F-AVX编程" class="headerlink" title="SSE/AVX编程"></a>SSE/AVX编程</h2><h3 id="X86架构"><a href="#X86架构" class="headerlink" title="X86架构"></a>X86架构</h3><h4 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h4><ul><li><p>X86：Intel开发的一种微处理器体系结构 </p></li><li><p>出现：1978年Intel 8086 CPU中 </p><ul><li>但是一般来说<strong>X86指的是X86_32bit，32位系统</strong></li><li>64位就是指X86_64bit。简写为X64</li></ul></li><li><p>发展：</p><ul><li><p>❑ 1971-1992年数字编号：80X86系列</p></li><li><p>❑ 1993-2005年奔腾系列：Pentium</p></li><li><p>❑ 2005酷睿系列：Core</p></li></ul></li></ul><h4 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h4><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251635439.png" alt="image-20221025163551311" style="zoom: 50%;"><ul><li>基本的执行模式 </li><li>数据类型 </li><li>指令集合（只讲这个） <ul><li>❑ 通用指令（传送，算术，逻辑，控制等） </li><li>❑ X87 FPU指令（传送，算术，比较，控制等 ） </li><li>❑ MMX指令（传送，转化，打包，比较等）</li><li>❑ SSE指令（增加寄存器，SIMD浮点数运算）</li><li>❑ SSE2指令（整数指令，64-bit SIMD浮点运 算）</li></ul></li><li>寄存器</li></ul><h4 id="x86架构SIMD支持"><a href="#x86架构SIMD支持" class="headerlink" title="x86架构SIMD支持"></a>x86架构SIMD支持</h4><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251641729.png" alt="image-20221025164145509" style="zoom: 50%;"><h3 id="SSE指令集"><a href="#SSE指令集" class="headerlink" title="SSE指令集"></a>SSE指令集</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251645135.png" alt="image-20221025164554037" style="zoom: 25%;"><h4 id="发展历史-1"><a href="#发展历史-1" class="headerlink" title="发展历史"></a>发展历史</h4><ul><li><p>SSE是MMX的超集</p></li><li><p>MMX</p><ul><li>❑ 1996年Intel在奔腾处理器集成MMX指令， 为应对音频、图片、视频等多媒体应用的密 集的计算需求 </li><li>❑ <strong>64-bit</strong>的MMX寄存器（8个，复用了浮点寄存器的尾部，与x87<strong>共用</strong>寄存器，缺少浮点指令） </li><li>❑ 支持在打包的字，字节，双字整数上的 SIMD操作</li></ul></li><li><p>SSE128bit寄存器与MMX寄存器的区别</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251650337.png" alt="image-20221025165011232"></li><li><strong>AVX 256位</strong></li></ul></li></ul><h3 id="AVX指令集"><a href="#AVX指令集" class="headerlink" title="AVX指令集"></a>AVX指令集</h3><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251651766.png" alt="image-20221025165156622" style="zoom: 25%;"><h3 id="SSE编程"><a href="#SSE编程" class="headerlink" title="SSE编程"></a>SSE编程</h3><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251653652.png" alt="image-20221025165341462" style="zoom:33%;"><h4 id="SSE指令"><a href="#SSE指令" class="headerlink" title="SSE指令"></a>SSE指令</h4><h5 id="数据移动指令"><a href="#数据移动指令" class="headerlink" title="数据移动指令"></a>数据移动指令</h5><p>将数据移入/出向量寄存器</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251658603.png" alt="image-20221025165835481" style="zoom:33%;"><h5 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h5><p>多个数据（2 doubles、4 floats等） 上的算术运算</p><ul><li>❑ PD：两个双精度，PS：四个单精度，SS：标量 </li><li>❑ ADD、SUB、MUL、DIV、SQRT、MAX、MIN、RCP等 <ul><li>➢ADDPS：四个单精度加法；ADDSS：标量加法</li></ul></li></ul><h5 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h5><p>多个数据上的逻辑运算</p><ul><li>❑ AND、OR、XOR、ANDN等 <ul><li>➢ANDPS – 运算对象位与 </li><li>➢ANDNPS – 运算对象位与非</li></ul></li></ul><h5 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h5><p>多个数据上的比较运算</p><p>❑ CMPPS、CMPSS：比较运算对象，每个比较结果影 响SIMD寄存器中32位——全1或全0</p><h5 id="洗牌指令"><a href="#洗牌指令" class="headerlink" title="洗牌指令"></a>洗牌指令</h5><p>在SIMD寄存器内移动数据</p><ul><li>❑ SHUFPS：从一个运算对象洗牌数据保存到另一个运 算对象 </li><li>❑ UNPCKHPS：解包高位数据到一个SIMD寄存器 <ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251701303.png" alt="image-20221025170117239" style="zoom:33%;"></li></ul></li><li>❑ UNPCKLPS</li></ul><h5 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h5><ul><li>❑ 类型转换：CVTPS2PI mm,xmm/mem64 </li><li>❑ 缓存控制<ul><li>➢MOVNTPS将浮点数据从一个SIMD寄存器保存到内存，绕 过缓存</li></ul></li><li>❑ 状态管理：LDMXCSR读取MXCSR状态寄存器</li></ul><h4 id="SSE-C-x2F-C-编程"><a href="#SSE-C-x2F-C-编程" class="headerlink" title="SSE C/C++编程"></a>SSE C/C++编程</h4><ul><li><p>SSE指令对应C/C++ intrinsic </p><ul><li>❑ intrinsic：编译器能识别的函数，直接映射 为一个或多个汇编语言指令。Intrinsic函数 本质上比调用函数更高效 </li><li>❑ Intrinsics为处理器专有扩展特性提供了一个 C/C++编程接口 </li><li>❑ 主流编译器都支持，如GCC</li></ul></li><li><p>使用SSE intrinsics所需的头文件（<strong>向前兼容</strong>） </p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210251706442.png" alt="image-20221025170622370" style="zoom: 50%;"></li><li>向前兼容：比如我想要使用SSE3，其中就包含了SSE和SSE2</li></ul></li><li><p>编译选项： -march=corei7</p></li><li><p>AMD CPU对MMX/SSE/SSE2支持较好，SSE4支持较差</p></li></ul><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><h5 id="串行版本"><a href="#串行版本" class="headerlink" title="串行版本"></a>串行版本</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="cache优化"><a href="#cache优化" class="headerlink" title="cache优化"></a>cache优化</h5><p>把ab两个矩阵都变成行主序  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">trans_mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//转置</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//⚠️是b[j][k],不是b[k][j]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token comment">//转置</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SSE版本🌟"><a href="#SSE版本🌟" class="headerlink" title="SSE版本🌟"></a>SSE版本🌟</h5><p>不懂</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sse_mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">float</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxN<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  __m128t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>  <span class="token comment">//转置</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      sum<span class="token operator">=</span><span class="token function">_mm_setzero_ps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">-=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t1<span class="token operator">=</span><span class="token function">_mm_loadu_ps</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token operator">=</span><span class="token function">_mm_loadu_ps</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token operator">=</span><span class="token function">_mm_mul_ps</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span><span class="token function">_mm_add_ps</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      sum<span class="token operator">=</span><span class="token function">_mm_hadd_ps</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>      sum<span class="token operator">=</span><span class="token function">_mm_hadd_ps</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">_mm_store_ss</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//如果还有不能被4整除的部分</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>        <span class="token comment">//转置</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h5><p>啥玩意啊</p><p>看不懂</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221101214350768.png" alt="image-20221101214350768"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221101214331724.png" alt="image-20221101214331724"></p>]]></content>
      
      
      <categories>
          
          <category> 并行程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行程序设计 </tag>
            
            <tag> S5课上 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行程序设计-第二讲.并行硬件与并行软件</title>
      <link href="/2022/09/13/di-er-jiang-bing-xing-ying-jian-he-bing-xing-ruan-jian/"/>
      <url>/2022/09/13/di-er-jiang-bing-xing-ying-jian-he-bing-xing-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="第二讲-并行硬件和并行软件"><a href="#第二讲-并行硬件和并行软件" class="headerlink" title="第二讲 并行硬件和并行软件"></a>第二讲 并行硬件和并行软件</h1><h2 id="冯诺依曼结构"><a href="#冯诺依曼结构" class="headerlink" title="冯诺依曼结构"></a>冯诺依曼结构</h2><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102147832.png" alt="image-20221010214750673" style="zoom:50%;"><p>缺点：cpu和存储器离得太远，取指令时间很长</p><h3 id="冯诺依曼模型改进"><a href="#冯诺依曼模型改进" class="headerlink" title="冯诺依曼模型改进"></a>冯诺依曼模型改进</h3><h4 id="利用cache"><a href="#利用cache" class="headerlink" title="利用cache"></a>利用cache</h4><ul><li><p>多级缓存</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102209318.png" style="zoom:25%;"></li><li><p>cpu向cache写数据时，cache和主存中的值不一致的问题</p><ul><li>写直达：当CPU 向Cache写数据时，高速缓存行会立即写入 主存中。</li><li>写回：Cache中，数据不是立即 更新到主存中，而是将发生数据更新的高速 缓存行标记称脏(dirty)。当发生高速缓存行 替换时，标记为脏的高速缓存行被写入主存 中。</li></ul></li></ul><h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>内存不够用时，再磁盘中开辟一块区域作为虚拟内存</p><p>但是常用的指令还是要放到内存中</p><h4 id="指令级并行ILP"><a href="#指令级并行ILP" class="headerlink" title="指令级并行ILP"></a>指令级并行ILP</h4><p>通过让多个处理器或者功能单元同时执 行指令来提高处理器的性能。</p><ul><li><p><strong>流水线</strong>：将功能单元分阶段安排</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102228662.png" style="zoom:25%;"></li><li><p><strong>多发射</strong>：让多条指令同时启动</p><ul><li><strong>静态</strong>多发射：功能单元在<strong>编译</strong>时调度</li><li><strong>动态</strong>多发射：功能单元再<strong>运行</strong>时间调度<ul><li>支持动态多发射的处理器叫做<strong>超标量</strong></li></ul></li><li>这两种发射方式都是<strong>硬件</strong>级别的，不是程序员控制的</li></ul><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102231899.png" alt="image-20221010223142729" style="zoom:25%;"></li><li><p>超标量</p><ul><li><p>为了能够利用多发射，系统必须找出能够同时执行的指令</p></li><li><p>在预测技术中，编译器或者处理器对一条指令进行猜测，然后在<strong>猜测</strong>的基础上执行代码。（可能会猜错</p></li><li><p>例1</p><img src="C:\Users\xiaon\AppData\Roaming\Typora\typora-user-images\image-20221021205239913.png" alt="image-20221021205239913" style="zoom: 25%;"><p>如果*a_p指向的是z，那么这两条指令不能同时执行</p></li><li><p>例2</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210212110457.png" alt="image-20221021211033384" style="zoom:25%;"><p>z可能为正数也可能为负数</p><p>如果系统猜错了，必须返回并重新计算w=y</p></li></ul></li></ul><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li><p><strong>进程</strong>：是运行着的程序的一个实例</p><ul><li><p><strong>多任务操作系统</strong></p><p>给人一种单一处理器系统同时运行多个程序的错觉</p><p>实际上<strong>每个进程轮流运行</strong></p><p>执行了一个时间片的时间后，他会等待一段时间直到再次运行</p></li></ul></li><li><p><strong>线程</strong></p><ul><li><p>线程包含在进程中</p></li><li><p>每个线程相互独立</p><p>当某个任务阻塞时能执行其他任务</p></li><li><p>线程间的切换比进程间的切换要快</p></li></ul></li></ul><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210102203190.png" alt="image-20221010220356970" style="zoom: 33%;"><h3 id="硬件多线程"><a href="#硬件多线程" class="headerlink" title="硬件多线程"></a>硬件多线程</h3><p>硬件多线程为系统提供一种机制，使得当前执行的任务被阻塞时，系统能够继续其他有用的工作</p><p>硬件多线程分为一下三种类型：</p><p>图示？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><ul><li><p>细粒度（程序员不可见</p><ul><li>处理器在<strong>每条指令</strong>完成后切换线程，从而跳过被阻塞的线程</li><li><strong>优点</strong>：能够避免因为阻塞而导致机器时间的浪费</li><li><strong>缺点</strong>：执行很长一段指令的线程在执行每条指令的时候都要等待</li></ul></li><li><p>粗粒度（程序员不可见</p><ul><li>只切换那些需要<strong>等待较长时间才能完成操作而被阻塞的线程</strong></li><li><strong>优点</strong>：不需要线程间的立即切换</li><li><strong>缺点</strong>：处理器还是可能在短阻塞时空闲，线程间的切换会导致延迟</li></ul></li><li><p>同步多线程（程序员可见，可以通过写程序来控制</p><ul><li>类似于多核（真正的同时</li><li>允许多个线程同时使用多个功能单元来利用超标量处理器的性能</li><li>局限性：一个核上面不会有太多的线程，常见的是2个线程</li></ul></li></ul><h2 id="并行硬件"><a href="#并行硬件" class="headerlink" title="并行硬件"></a>并行硬件</h2><h3 id="Flynn’s-分类法"><a href="#Flynn’s-分类法" class="headerlink" title="Flynn’s 分类法"></a>Flynn’s 分类法</h3><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210212141324.png" alt="image-20221021214151218" style="zoom:33%;"><h3 id="SIMD（单指令多数据流）"><a href="#SIMD（单指令多数据流）" class="headerlink" title="SIMD（单指令多数据流）"></a>SIMD（单指令多数据流）</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>通过将<strong>数据</strong>分配给多个处理器实现并行化</p><p>使用<strong>相同的指令</strong>来操纵数据子集</p><p>这种并行称为<strong>数据并行</strong></p><p> 例子</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210220916715.png" alt="image-20221022091601607" style="zoom: 33%;"></li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210220916572.png" alt="image-20221022091638479"></li></ul><h4 id="SIMD缺点："><a href="#SIMD缺点：" class="headerlink" title="SIMD缺点："></a>SIMD缺点：</h4><ul><li>所有ALU（算术处理单元）<strong>要么执行相同的指令，要么同时处于空闲状态</strong></li><li>ALU<strong>没有指令存储器</strong></li><li>在经典的SIMD系统中，ALU必须<strong>同步</strong>操作</li><li>SIMD并行性在<strong>大型数据</strong>并行问题上非常有用，处理其他并行问题时并不优秀</li></ul><h4 id="SIMD典型应用"><a href="#SIMD典型应用" class="headerlink" title="SIMD典型应用"></a>SIMD典型应用</h4><h5 id="向量处理器"><a href="#向量处理器" class="headerlink" title="向量处理器"></a>向量处理器</h5><ul><li><p>向量处理器是对<strong>数组或者数据向量</strong>进行操作，而传统的cpu是对<strong>单独数据元素或者标量</strong>进行操作</p></li><li><p>原理</p><ul><li><p>向量寄存器</p><p>能够存储由<strong>多个操作数组成的向量</strong>，并且能够同时对其内容进行操作的寄存器</p></li><li><p>向量化和流水化的功能单元</p><p>对向量中每个元素做同样的操作，这些操作需要应用到2个或以上对应元素上</p></li><li><p>向量指令</p><p>在向量上操作而不是在标量上操作</p></li><li><p>交叉存储器（不太重要</p><p>内存系统由多个内存“体”组成，每个内存体能够独立访问</p><p>如果向量中各个元素分布在<strong>不同的内存体</strong>中，那么在装入/存储连续数据时几乎能够<strong>无延迟访问</strong></p></li><li><p>步长式存储器访问和硬件的散射/聚集（不太重要</p><p>程序能够访问向量中固定间隔的元素</p></li></ul></li><li><p>向量处理器优点（理解即可</p><ul><li><p>速度快</p></li><li><p>容易使用</p></li><li><p>向量编译器擅长于识别向量化的代码</p></li><li><p>编译器也能提供代码为什么不能向量化的原因</p><p>帮助程序员重新评估代码</p></li><li><p>很高的内存带宽</p></li><li><p>每个加载的数据都会使用</p></li></ul></li><li><p>向量处理器缺点</p><ul><li>不能处理<strong>不规则</strong>的数据结构和其他并行结构<ul><li>不规则：例如加一个判断语句y&gt;0之类的就不适用</li></ul></li><li>他的<strong>可扩展性</strong>是个限制，可扩展性是指能够处理更大问题的能力<ul><li>想要提高性能就只能增加向量处理器的数量，而不是提高向量处理器的能力</li></ul></li></ul></li></ul><h5 id="GPU（图形处理单元）"><a href="#GPU（图形处理单元）" class="headerlink" title="GPU（图形处理单元）"></a>GPU（图形处理单元）</h5><ul><li>GPU使用图形处理流水线将物体表面的内部表示转化成一个像素的数组</li><li>流水线的许多阶段（通过着色函数实现）是可编程的</li><li>GPU常使用SIMD来优化性能</li><li>现在所有的GPU都使用SIMD并行<ul><li>尽管GPU不是纯粹的SIMD系统（GUP里有很多很多核</li><li>1个控制单元对应多个处理单元？？？</li></ul></li></ul><h3 id="MIMD（多指令多数据流）"><a href="#MIMD（多指令多数据流）" class="headerlink" title="MIMD（多指令多数据流）"></a>MIMD（多指令多数据流）</h3><ul><li><p>支持同时多个指令流在多个数据流上操作</p></li><li><p>通常包括完全独立的处理单元或者核，每个处理单元或者核都有自己的控制单元和ALU</p><ul><li><p>对比SIMD：</p><p>SIMD系统那些指令单元必须<strong>同步执行相同指令</strong></p></li></ul></li></ul><h4 id="MIMD分为两大类"><a href="#MIMD分为两大类" class="headerlink" title="MIMD分为两大类"></a>MIMD分为两大类</h4><h5 id="共享内存系统"><a href="#共享内存系统" class="headerlink" title="共享内存系统"></a>共享内存系统</h5><ul><li><p>一组自治的处理器通过互联网络与内存系统相互连接</p><ul><li>意思是这些处理器<strong>共享所有内存</strong>，每个处理器能够访问每个内存区域</li><li>处理器通过<strong>访问共享的数据结构</strong>来<strong>隐式的通信</strong></li></ul></li><li><p>最广泛使用的共享内存系统使用一个或者多个多核处理器</p><ul><li>在一块芯片上有多个cpu或者核</li></ul></li><li><p>图示</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221002252.png" alt="image-20221022100256140" style="zoom: 25%;"></li><li><p>共享内存系统可以分为两类：</p><ul><li><p>UMA一致内存访问系统</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221006036.png" alt="image-20221022100638935"></p></li><li><p>NUMA非一致内存访问系统</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221010042.png" alt="image-20221022101055916"></p><p>这是共享内存系统，而不是分布式内存系统！！</p></li></ul></li></ul><h5 id="分布式内存系统"><a href="#分布式内存系统" class="headerlink" title="分布式内存系统"></a>分布式内存系统</h5><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210221010627.png" alt="image-20221022101027522" style="zoom: 25%;"><ul><li>集群（最广泛使用<ul><li>这些系统中的节点是通过通信网络互相连接的独立计算单元</li></ul></li></ul><h4 id="互联网络"><a href="#互联网络" class="headerlink" title="互联网络"></a>互联网络</h4><ul><li><p>在分布式内存系统和共享内存系统都扮演了一个决定性的角色</p></li><li><p>分为两类</p><p>共享内存互联网络</p><p>分布式内存互联网络</p><p>=======================草，从这往后好像都没讲草草草草</p></li></ul><h5 id="共享内存互联网络"><a href="#共享内存互联网络" class="headerlink" title="共享内存互联网络"></a>共享内存互联网络</h5><ul><li><p>总线互连</p><ul><li>需要排队，但成本低</li><li>随着连接到总线的设备数量的增加，对总线 的使用的竞争会增加，性能会下降。</li></ul></li><li><p>交换互连网络</p><p>灵活但造价高</p><p>允许<strong>不同设备</strong>之间<strong>同时</strong>进行通信</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231827338.png" alt="image-20221023182726222" style="zoom: 50%;"><h6 id="cache一致性问题"><a href="#cache一致性问题" class="headerlink" title="cache一致性问题"></a>cache一致性问题</h6><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o682zywcj30gw0osjsp.jpg" alt="image-20221031083552339"></p><p>Y1，z1为1号核的私有变量</p><p>y0为0号核的私有变量</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o6bou6v7j30xu0e2myq.jpg" alt="image-20221031083920604"></p></li><li><p>监听cache一致性协议</p><ul><li>core0更新x时，会在总线上广播更新信息，core1可以监听到（⚠️不是直接传递x的信息，而是广播共享）</li></ul></li><li><p>基于目录的cache一致性协议</p><ul><li>使用一个叫做<strong>目录</strong>的结构，存储每个内存行的状态</li><li>当一个变量需要更新时，就会查询目录，并将所有包含该<strong>变量</strong>的高速缓存行设置为非法</li></ul></li></ul><h5 id="分布式内存互联网络"><a href="#分布式内存互联网络" class="headerlink" title="分布式内存互联网络"></a>分布式内存互联网络</h5><h6 id="分为两种：直接互连（要求全部掌握）、间接互连"><a href="#分为两种：直接互连（要求全部掌握）、间接互连" class="headerlink" title="分为两种：直接互连（要求全部掌握）、间接互连"></a>分为两种：直接互连（要求全部掌握）、间接互连</h6><ul><li><p>直接互连</p><ul><li><p>每个交换器与一个处理器-内存对直接相连，交换器之间也互相连接</p></li><li><p>一个环</p><p>可以同时进行通信</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231835525.png" alt="image-20221023183528459" style="zoom:50%;"></li><li><p>二维环面网络</p><p>可以同时进行信息交换的节点更多</p><p>造价更高</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231836859.png" alt="image-20221023183648796" style="zoom: 33%;"></li></ul></li><li><p>间接互连</p><ul><li><p>交换器不一定与处理器直接相连</p></li><li><p>间接网络中相对简单的例子：</p><ul><li><p>交叉开关矩阵</p><p>区分<strong>共享互联网络</strong>中的交叉开关矩阵</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231925922.png" alt="image-20221023192547825" style="zoom:33%;"></li><li><p>Omega网络</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o5yhbdsaj30p00nymyn.jpg" alt="image-20221031082637682"></p></li></ul></li></ul></li></ul><h6 id="一些定义（直接互连中）"><a href="#一些定义（直接互连中）" class="headerlink" title="一些定义（直接互连中）"></a>一些定义（直接互连中）</h6><ul><li><p>等分宽度（需要会计算</p><ul><li><p>衡量“同时通信的链路数目”或者“连接性”的一个标准</p></li><li><p>想象并行系统被分成两部分，每部分都 有一半的处理器或者节点。在这两部份 之间能同时发生多少通信呢？</p></li><li><p>例1：一个环的两种等分<img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231845256.png" alt="image-20221023184507171"></p><p>等分宽度求的是最少的情况下的同时通信链路数目</p><p>这个环的等分宽度是2而不是4</p></li><li><p>例2：一个二维环面网格的等分</p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231852261.png" alt="image-20221023185215144" style="zoom: 25%;"><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231852924.png" alt="image-20221023185239861" style="zoom: 33%;"><p>把红线全部删掉才能把网格结构<strong>等分成两份</strong>，把两部分完全分开，由图一变成图二，要剪断<strong>8</strong>根线</p><p><strong>总结</strong>：</p><p>二维环面网格的<strong>等分宽度</strong>为<strong>2*p^(0.5)</strong></p><p>p表示处理器的数目</p></li></ul></li><li><p>延迟</p><ul><li>指从发送源开始传送数据到目的地开始接受数据之间的时间</li><li><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7o611kz3fj30qm0ikwg2.jpg" alt="image-20221031082906633"></li></ul></li><li><p>带宽</p><ul><li>传输数据的速度</li><li>通常用兆位每秒或者兆字节每秒来表示</li></ul></li><li><p>等分带宽</p><ul><li>等分带宽=等分宽度×带宽</li><li>用来衡量网络的质量</li><li>不是计算连接两个等分之间的链路数，而是计算链路的带宽</li></ul></li></ul><h6 id="几个直接互连的例子"><a href="#几个直接互连的例子" class="headerlink" title="几个直接互连的例子"></a>几个直接互连的例子</h6><ul><li><p>全相连网络</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231906924.png" alt="image-20221023190651837"></li><li>等分宽度太大，造价高，不切实际</li></ul></li><li><p>超立方体</p><ul><li>假如维度为d，则有2^d（p=2^d）个节点，等分宽度为p➗2</li></ul></li></ul><table><thead><tr><th>结构</th><th>图片</th><th>等分宽度（p为交换器数目）</th></tr></thead><tbody><tr><td>环</td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231915846.png" alt="image-20221023191549780" style="zoom:25%;"></td><td>2</td></tr><tr><td>二维环面网状结构</td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231917760.png" alt="image-20221023191734686" style="zoom:25%;"></td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231916152.png" alt="image-20221023191644099" style="zoom:25%;"></td></tr><tr><td>超立方体</td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231918391.png" alt="image-20221023191804315" style="zoom:25%;"></td><td><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/202210231918813.png" alt="image-20221023191829753" style="zoom:25%;"></td></tr></tbody></table><p>当p&gt;4时，性能：超立方体结构&gt;二维环面网状结构、环</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><hr><p>下面这块是从w4l2开始的，中间部分老师跳过了</p><h2 id="并行算法分析"><a href="#并行算法分析" class="headerlink" title="并行算法分析"></a>并行算法分析</h2><h3 id="基本指标-🌟必考"><a href="#基本指标-🌟必考" class="headerlink" title="基本指标(🌟必考)"></a>基本指标(🌟必考)</h3><ul><li><p>串行算法评价：</p><ul><li>算法时间复杂度表示为<strong>输入规模</strong>的函数</li></ul></li><li><p>并行算法评价</p><ul><li><p>除了输入规模之外，还需要考虑处理器的树木、处理器相对运算速度、通信速度</p></li><li><p>运行时间</p></li><li><p>加速比：选择串行算法<strong>最优</strong>的时间和并行算法时间做除法</p><ul><li>默认串行算法和并行算法所用的处理器相同</li></ul><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102104746771.png" alt="image-20221102104746771"></p></li></ul></li></ul><h4 id="加速比"><a href="#加速比" class="headerlink" title="加速比"></a>加速比</h4><ul><li><p>例</p><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102105459233.png" alt="image-20221102105459233"></p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102105529255.png" alt="image-20221102105529255"></p></li><li><p>初始：每个进程保存一个数，最终由一个进程保存累加和</p></li><li><p>树形结构：logn个步骤</p><p>每个步骤进行一次加法：</p><p>和一个机器字的传输</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102112240099.png" alt="image-20221102112240099"></p><p>没懂？？？</p></li></ul></li><li><p>例。加速比的计算（‼️考试容易考）</p><ul><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102112435610.png" alt="image-20221102112435610"></p></li><li><p>p为核数</p></li><li><p>搜索分解导致超线性的例子</p><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102113015030.png" alt="image-20221102113015030"></p></li></ul></li></ul><h5 id="阿姆达尔定律"><a href="#阿姆达尔定律" class="headerlink" title="阿姆达尔定律"></a>阿姆达尔定律</h5><ul><li><p>定义</p><ul><li>除非一个串行程序的执行几乎全部都并行化，否则不论多少可以利用的核，通过并行化所产生的加速比都会是受限的</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102200500482.png" alt="image-20221102200500482"></li></ul></li><li><p>例子</p><ul><li><p>理想化：0.9的可完全并行，拥有线性加速比<img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102200035338.png" alt="image-20221102200035338"></p></li><li><p>从公式可以看出来，s和串行程序运行时间是无关的</p></li></ul></li></ul><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><ul><li><p>效率：度量有效计算时间</p></li><li><p><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102200902075.png" alt="image-20221102200902075"></p></li><li><p>例1</p><ul><li>n个核对n个数求和</li><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102201204778.png" alt="image-20221102201204778"></li></ul></li><li><p>例2</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102201235794.png" alt="image-20221102201235794"></li></ul></li></ul><h4 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h4><ul><li><p>我们希望，保持问题规模不变时，效率不随着线程数的增加而降低，则称程序是可扩展的</p><ul><li>强扩展的</li></ul></li><li><p>问题规模增大时，效率不随着线程数的增加而降低，则称程序是可扩展的</p><ul><li>弱扩展的</li></ul></li><li><p>例子</p><p> <img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102203837409.png" alt="image-20221102203837409"></p></li><li><p>例子：快速傅立叶变换</p><ul><li><img src="https://zxn-1313885264.cos.ap-beijing.myqcloud.com/images_typora/image-20221102204141865.png" alt="image-20221102204141865"></li></ul></li></ul><h3 id="并行程序设计的复杂性"><a href="#并行程序设计的复杂性" class="headerlink" title="并行程序设计的复杂性"></a>并行程序设计的复杂性</h3><ul><li>足够的并发度</li><li>并发粒度<ul><li>独立的计算任务的大小</li></ul></li><li>局部性<ul><li>对临近数据进行计算</li><li>尽量减少数据的计算，对离得比较近的数据进行计算</li></ul></li><li>负载均衡<ul><li>每个处理器工作量相近</li></ul></li><li>协调和同步</li></ul><h3 id="并行算法额外开销"><a href="#并行算法额外开销" class="headerlink" title="并行算法额外开销"></a>并行算法额外开销</h3><ul><li>进程间通信<ul><li>也可能是线程通信</li><li>最大开销，大部分并行算法都需要</li></ul></li><li>进程空闲<ul><li>负载不均，同步操作，不能并行化的部分</li></ul></li><li>额外计算<ul><li>最优串行算法难以并行化，将很差的串行算法并行化，并行算法计算量&gt;最优串行算法</li><li>最优串行算法并行化也会产生额外计算<ul><li>并行快速傅立叶变换</li><li>旋转因子的重复计算</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 并行程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并行程序设计 </tag>
            
            <tag> S5课上 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog 说明</title>
      <link href="/2021/09/07/hello-world/"/>
      <url>/2021/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generatehexo g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deployhexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">hexo new "name"       # 新建文章hexo new page "name"  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Font-matter"><a href="#Font-matter" class="headerlink" title="Font-matter"></a>Font-matter</h2><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章分类"><a href="#文章分类" class="headerlink" title="文章分类"></a>文章分类</h2><p>每篇博文都是按照 <strong>“科目/项目-名字”</strong> 的形式命名的。其中归类是按照 <strong>“科目/项目”</strong> 进行归类</p><p>对于标签，呈现 <strong>“2 + n”</strong> 的结构，<strong>2</strong> 指的是每个博文都有一个“科目/项目”标签，一个“时间标签”，每个学期都会分为“课上”，“复习”，“假期”3个标签，用于细化时间节点。<strong>n</strong> 文章的属性，应该有以下几种：</p><table><thead><tr><th align="left">类别</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">工具总结</td><td align="left">包括数学工具，办公工具，各种软件的使用方法</td></tr><tr><td align="left">知识总结</td><td align="left">是对所学内容的系统梳理，这种文章应该都是比较系统、全面，但是也比较死板</td></tr><tr><td align="left">直观理解</td><td align="left">这方面记录了很多直观化的知识，但是相应的，也比较跳脱，不严谨</td></tr><tr><td align="left">吃喝玩乐</td><td align="left">生活记录</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> blog说明 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 说明 </tag>
            
            <tag> S6课上 </tag>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
